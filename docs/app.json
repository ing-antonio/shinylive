[{"name":"app.R","content":"# app.R\nlibrary(shiny)\nlibrary(here)\nlibrary(dplyr)\nlibrary(leaflet)\nlibrary(yaml)\n\nhere::i_am(\"procesamiento/app.R\")\nsource(here(\"auxiliares/funciones.R\")) \n\n# Cargar datos\ndatos <- readRDS(here(\"datos/datos.rds\"))\n\ndatos <- datos %>%\n  mutate(\n    latitud  = as.numeric(latitud),\n    longitud = as.numeric(longitud)\n  ) %>%\n  filter(!is.na(latitud) & !is.na(longitud))\n\nusuarios <- yaml::read_yaml(here(\"auxiliares/usuarios.yml\"))$usuarios\n\nusuarios <- do.call(rbind.data.frame, lapply(usuarios, as.data.frame))\nusuarios[] <- lapply(usuarios, as.character)\n\nprint(usuarios)\n\nui <- fluidPage(\n  uiOutput(\"login_ui\"),\n  uiOutput(\"app_ui\")\n)\n\nserver <- function(input, output, session){\n  \n  user <- reactiveVal(NULL)\n  \n  output$login_ui <- renderUI({\n    if(is.null(user())){\n      fluidRow(\n        column(4, offset = 4,\n               textInput(\"usuario\", \"Usuario:\"),\n               passwordInput(\"password\", \"Contrase침a:\"),\n               actionButton(\"entrar\", \"Entrar\")\n        )\n      )\n    }\n  })\n  \n  observeEvent(input$entrar, {\n    fila <- usuarios %>%\n      filter(usuario == input$usuario, password == input$password)\n    if(nrow(fila) == 1){\n      user(fila$alcaldia)  \n    } else {\n      showModal(modalDialog(\n        title = \"Error\",\n        \"Usuario o contrase침a incorrectos\",\n        easyClose = TRUE\n      ))\n    }\n  })\n  \n  output$app_ui <- renderUI({\n    req(user())\n    fluidPage(\n      h3(paste(\"Bienvenido,\", user())),\n      dateRangeInput(\"fechas\", \"Selecciona rango de fechas:\",\n                     start = min(datos$fecha_inicio),\n                     end = max(datos$fecha_inicio)),\n      leafletOutput(\"mapa\", height = 600)\n    )\n  })\n  \n  datos_filtrados <- reactive({\n    req(user())\n    if(user() == \"TODAS\"){\n      datos %>%\n        filter(fecha_inicio >= input$fechas[1],\n               fecha_inicio <= input$fechas[2])\n    } else {\n      filtrar_datos(\n        datos,\n        alcaldia_seleccionada = user(),\n        fecha_inicio_seleccionada = input$fechas[1],\n        fecha_fin_seleccionada = input$fechas[2]\n      )\n    }\n  })\n  \n  \n  output$mapa <- renderLeaflet({\n    req(datos_filtrados())\n    df <- datos_filtrados()\n    leaflet(df) %>%\n      addTiles() %>%\n      addCircles(~longitud, ~latitud)\n  })\n}\n\nshinyApp(ui, server)\n","type":"text"},{"name":"consulta_ws.R","content":"require(pacman)\np_load(\n  here,           # Para manejo de rutas relativas del proyecto\n  DBI,            # Para conexiones a bases de datos (dbConnect, dbGetQuery, dbSendQuery)\n  RPostgreSQL,    # Driver para conexiones a PostgreSQL\n  lubridate,      # Para manejo de fechas (today)\n  yaml            # Para leer archivos de configuraci칩n YAML (read_yaml)\n)\nhere::i_am(\"procesamiento/consulta_ws.R\") \n\n\nconfig_file <- here(\"auxiliares/config.yml\")\nconfig <- yaml::read_yaml(config_file)\n\n# Conectar a la base de datos usando los valores del archivo de configuraci칩n\nconn <- dbConnect(\n  \"PostgreSQL\", \n  dbname = config$db_name, \n  host = config$db_host,\n  port = config$db_port, \n  user = config$db_username, \n  password = config$db_password\n)\n\ndbSendQuery(conn, \"SET client_encoding = 'UTF8';\")\n\ndatos <- dbGetQuery(conn, paste0(\n  paste0(\"SELECT\n    \\\"idCI\\\", \n    \\\"CTHecho\\\", \n  delito, \n  categoria_delito, \n  colonia_hecho, \n  DATE(fecha_inicio) fecha_inicio, \n  alcaldia_hecho, \n  nombre_sec, \n  \\\"Nomenclatu\\\",\n  latitud, \n  longitud\n  FROM dashboard_seguridad.carpetas_directas_cc_cdmx\n  WHERE DATE(fecha_inicio) >= '2024-01-01'\n         and categoria_delito != 'Delito de bajo impacto'\")))\n\n\ndbDisconnect(conn)\n\n\ndatos <- datos %>%\n  filter(!is.na(latitud) & !is.na(longitud))\n\n# Guardar datos para la app\nsaveRDS(datos, here(\"datos/datos.rds\"))\n","type":"text"}]

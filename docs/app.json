[{"name":"app.R","content":"\r\n\r\n# app.R\r\nlibrary(shiny)\r\nlibrary(here)\r\nlibrary(dplyr)\r\nlibrary(leaflet)\r\nlibrary(yaml)\r\n\r\nhere::i_am(\"procesamiento/app.R\")\r\nsource(here(\"auxiliares/funciones.R\")) \r\n\r\n# Cargar datos\r\ndatos <- readRDS(here(\"datos/datos.rds\"))\r\n\r\ndatos <- datos %>%\r\n  mutate(\r\n    latitud  = as.numeric(latitud),\r\n    longitud = as.numeric(longitud)\r\n  ) %>%\r\n  filter(!is.na(latitud) & !is.na(longitud))\r\n\r\nusuarios <- yaml::read_yaml(here(\"auxiliares/usuarios.yml\"))$usuarios\r\n\r\nusuarios <- do.call(rbind.data.frame, lapply(usuarios, as.data.frame))\r\nusuarios[] <- lapply(usuarios, as.character)\r\n\r\nprint(usuarios)\r\n\r\nui <- fluidPage(\r\n  uiOutput(\"login_ui\"),\r\n  uiOutput(\"app_ui\")\r\n)\r\n\r\nserver <- function(input, output, session){\r\n  \r\n  user <- reactiveVal(NULL)\r\n  \r\n  output$login_ui <- renderUI({\r\n    if(is.null(user())){\r\n      fluidRow(\r\n        column(4, offset = 4,\r\n               textInput(\"usuario\", \"Usuario:\"),\r\n               passwordInput(\"password\", \"Contrase침a:\"),\r\n               actionButton(\"entrar\", \"Entrar\")\r\n        )\r\n      )\r\n    }\r\n  })\r\n  \r\n  observeEvent(input$entrar, {\r\n    fila <- usuarios %>%\r\n      filter(usuario == input$usuario, password == input$password)\r\n    if(nrow(fila) == 1){\r\n      user(fila$alcaldia)  \r\n    } else {\r\n      showModal(modalDialog(\r\n        title = \"Error\",\r\n        \"Usuario o contrase침a incorrectos\",\r\n        easyClose = TRUE\r\n      ))\r\n    }\r\n  })\r\n  \r\n  output$app_ui <- renderUI({\r\n    req(user())\r\n    fluidPage(\r\n      h3(paste(\"Bienvenido,\", user())),\r\n      dateRangeInput(\"fechas\", \"Selecciona rango de fechas:\",\r\n                     start = min(datos$fecha_inicio),\r\n                     end = max(datos$fecha_inicio)),\r\n      leafletOutput(\"mapa\", height = 600)\r\n    )\r\n  })\r\n  \r\n  datos_filtrados <- reactive({\r\n    req(user())\r\n    if(user() == \"TODAS\"){\r\n      datos %>%\r\n        filter(fecha_inicio >= input$fechas[1],\r\n               fecha_inicio <= input$fechas[2])\r\n    } else {\r\n      filtrar_datos(\r\n        datos,\r\n        alcaldia_seleccionada = user(),\r\n        fecha_inicio_seleccionada = input$fechas[1],\r\n        fecha_fin_seleccionada = input$fechas[2]\r\n      )\r\n    }\r\n  })\r\n  \r\n  \r\n  output$mapa <- renderLeaflet({\r\n    req(datos_filtrados())\r\n    df <- datos_filtrados()\r\n    leaflet(df) %>%\r\n      addTiles() %>%\r\n      addCircles(~longitud, ~latitud)\r\n  })\r\n}\r\n\r\nshinyApp(ui, server)\r\n","type":"text"},{"name":"consulta_ws.R","content":"require(pacman)\np_load(\n  here,           # Para manejo de rutas relativas del proyecto\n  DBI,            # Para conexiones a bases de datos (dbConnect, dbGetQuery, dbSendQuery)\n  RPostgreSQL,    # Driver para conexiones a PostgreSQL\n  lubridate,      # Para manejo de fechas (today)\n  yaml            # Para leer archivos de configuraci칩n YAML (read_yaml)\n)\nhere::i_am(\"procesamiento/consulta_ws.R\") \n\n\nconfig_file <- here(\"auxiliares/config.yml\")\nconfig <- yaml::read_yaml(config_file)\n\n# Conectar a la base de datos usando los valores del archivo de configuraci칩n\nconn <- dbConnect(\n  \"PostgreSQL\", \n  dbname = config$db_name, \n  host = config$db_host,\n  port = config$db_port, \n  user = config$db_username, \n  password = config$db_password\n)\n\ndbSendQuery(conn, \"SET client_encoding = 'UTF8';\")\n\ndatos <- dbGetQuery(conn, paste0(\n  paste0(\"SELECT\n    \\\"idCI\\\", \n    \\\"CTHecho\\\", \n  delito, \n  categoria_delito, \n  colonia_hecho, \n  DATE(fecha_inicio) fecha_inicio, \n  alcaldia_hecho, \n  nombre_sec, \n  \\\"Nomenclatu\\\",\n  latitud, \n  longitud\n  FROM dashboard_seguridad.carpetas_directas_cc_cdmx\n  WHERE DATE(fecha_inicio) >= '2024-01-01'\n         and categoria_delito != 'Delito de bajo impacto'\")))\n\n\ndbDisconnect(conn)\n\n\ndatos <- datos %>%\n  filter(!is.na(latitud) & !is.na(longitud))\n\n# Guardar datos para la app\nsaveRDS(datos, here(\"datos/datos.rds\"))\n","type":"text"}]
